You can visit my unofficial Project64 1.6.2 repo here: https://github.com/BruceShankleIV/Project64-1.6.2
https://discord.gg/cHDxa9vzQM -Discord Report Center for reporting issues/problems you experience whilst
running Project64 1.6.2 to either get fixed in the future, or at least become documented about/recorded.
********************************************************************************************************
---------------------------
|||||Table of Contents|||||
---------------------------
Section#00 Hardware Compatibility
Section#01 IP Notice
Section#02 Notable Changes Between Project64 Version 1.6.1 & Project64 Version 1.6.2
Section#03 Project64 Legacy is an unfinished emulator with concerning issues to be aware of if using it!
Section#04 Plugin Details
Section#05 RUNNING ROMHACKS
Section#06 Known Issues
Section#07 Tips and Tricks
Section#08 Credits
Section#09 Don't "Support Project64"
Section#10 Special Thanks & Shoutouts
Section#11 The End
Section#12 Extra (Part 1), Suggestions
Section#13 Extra (Part 2), How to Develop Project64 1.6 + BEWARE of MiB/PJ64Team!
Section#14 Extra (Part 3), Technical Documentation
Section#15 Extra (Part 4), The ROM Browser Setup

(just ctrl-f the name to navigate to your desired section)
********************************************************************************************************

Section#00 Hardware Compatibility
--------------------------------------------------------------------------------------------------------
This program was originally designed on very old versions of Windows which Version 1.6.2 doesn't support
anymore. Version 1.6.2 was developed with a Windows 10 Gaming PC and isn't expected to function properly
on older versions of Windows like Windows 2000 and Windows 95. Theoretically, this program may work on a
Windows XP machine but this has not been confirmed to be true and there will be issues even if it works.
The minimum suggested operating system for this program is Windows 7, anything older will suffer issues.

Some of the plugins you can choose from may not work on your computer. If that's the case, get on GitHub
and download Bad video plugins for bad PC's if there is a game you're trying to play which you can't get
working on your PC with the plugins that work for you and perhaps you can get it working with one of the
bad plugins. However, these plugins are bad in that most of them can cause the emulator to crash or have
really terrible unintended side effects so I would strongly suggest you get a better Windows PC instead.
--------------------------------------------------------------------------------------------------------

Section#01 IP Notice
--------------------------------------------------------------------------------------------------------
This emulator doesn't infringe on intellectual property of, nor is it endorsed by Nintendo or Project64.
This emulator which I refer to as my Project64 1.6.2, is my unofficial update and successor to PJ64 1.6.
Emulators are legal provided that they do not violate copyright, and my Project64 1.6.2 is legal because
it does not come with ROM's (.z64, .n64) nor is it compiled with code that I can't legally use for this.
This emulator also won't circumvent any encryption whatsoever, further attesting to its legality status.
--------------------------------------------------------------------------------------------------------

Section#02 Notable Changes Between Project64 Version 1.6.1 & Project64 Version 1.6.2
--------------------------------------------------------------------------------------------------------
This section will be divided into two parts to give fair credit where it is due: one part is for changes
from Plus (https://github.com/pj64team/Project64-1.6-Plus/tree/7ff51997c16e35a1c0685cc076b085ee6eda1b64)
while the other part lists a sample of only some of the changes from 1.6.2. There are so many changes in
my Project64 1.6.2 that it would simply be too much to list so I will only touch on the important stuff.



Project64 1.6 Plus:


Arbitrary code vulnerability fix.

TLB miss in write opcodes are now generating exceptions as expected. This solves a vulnerability that
can allow ROMs to run arbitrary code in previous releases.

Adds an extra check for user mapping TLB further than allowed buffer size.

Good Name replaced by Game Name in RDB & Browser Tab.

Always remember cheats as default so user don't have to re-enable after every close

Max 10 Recent ROMs as default

Max 10 Recent ROM Dir as default

ROM Dir Recursion as default, this allows sub-directories to be included in ROM browser

(Undocumented) Checksum mismatch bypassment to allow Jabo video to apply per game hacks for romhacks.

(Undocumented) Several new regressions and problems introduced which were later fixed in Ver1.6.2.



Project64 1.6.2:


Added and removed plugins (too much to list the specifics here, please see later sections of the guide).

Added cheat support for a ton of Zelda64 ROMhacks as well as a great mod known as Super Mario Star Road.

Added custom-made "Check Memory & Return" self-modifying code method to help support games like OoT 1.x.

Added drag-n-drop support when opening ROMs so there is no need to go through file explorer's interface.

Added frame advance option under the System tab to let users advance through games, one frame at a time.

Added plugin hot swapping support which allows the user to change plugins in real-time without problems.

Added new Registry section under the Options tab with various different registry options for you to try.
(Use standard mode to gracefully exit from custom modes to better support different kinds of N64 games!)

Added ROM browser refresh polling (refreshing everytime the rom browser is loaded, fine for ROM format).

Added shortcuts for Graphics, Audio, Controller, and RSP plugins, CPU Pause, and a Frame advance option.

Added vcruntime140 from MS VC Redistributable 2022 to support one of the new plugins that has got added.

Added vulnerability failesafes which prevent various things a cyber attacker may attempt to pull on you.

Blocked hyperlinks for security reasons (a plugin you add could link to a website that becomes harmful).

Changed a few error messages to be more informative so that they are actually helpful, instead of saying
that something is wrong and not giving the user any idea on how to fix the problem they're experiencing.

Changed the FPS display to round to whole numbers, de-acronym the term, and display even if not running.

Changed the way resetting is done to fix Jabo FSAA flickering on reset in fullscreen and GLideN64 crash.

Changed Good Name->Game Name in the browser and in what word it uses to identify what to display in RDB.

Changed maximum savestate count per game from 10 to 30 to account for games that share the same ROMname.

Disabled ABL dropdown menu and set to off by default, essential in helping reducing the total file size.

Disabled ROM database extension (RDX) because it does not improve gameplay experience and adds to bloat.

Disabled savestate ROMheader mismatch prompt, this allows for loading a savestate with an unintended ROM
but this's beneficial when playing ROMhacks that use hacked checksums to activate jabo's per-game hacks.

Disabled state compressions because you should have enough drive space reserved for uncompressed states.

Disabled show CPU usage. This is something already present in Windows, it is a bit redundant to keep it.

Disabled plugin directory selection because changing your plugin directory could have unintended issues.

Disabled end emulation in fullscreen mode because it's crashing.

Faster resets and loads/bootups.

Fixed "Always On Top" not being togglable from within the ROM browser.

Fixed certain ROMhacks having their save file get deleted upon being saved (Indigo, Ultimate Trial).

Fixed loadstate glitches.

Fixed ROM extension association.

Fixed ROM loading plugin init freezes (no more plugin-related crashes on or just after ROM open).

Fixed ROM-loading delay.

Fixed slot states not being able to manually load.

Fixed multiple crashes upon start of emulation.

Massive updates to databases.

***TONS more other stuff has been changed, but it would be too much to explain all of it here, sorry!***
--------------------------------------------------------------------------------------------------------

Section#03 Project64 Legacy is an unfinished emulator with concerning issues to be aware of if using it!
--------------------------------------------------------------------------------------------------------
For your information, here's some issues I have experienced with Project64 "Legacy" as of version 1.6.4:

* Some retail N64 games don't ever boot at all. No matter what settings get used, some games don't work.
* Screen shaking issue in some games like Indiana Jones and The Infernal Machine.
* When saving in some ROMhacks, instead of saving your save data, it will outright delete it altogether.
* In some ROMhacks, you shall get a black screen while the game is still running for no apparent reason.
* Resetting will straight-up crash the emulator with some games, ROMhack or not (Mario Party, or Conker,
  ROMhacks like, "That Time I Became Friends With The Royal Scuttlebug Family And Fell from Space.z64").
* Configuring the included high-level RSP freezes if done while a game is running, killing all progress.
* There is a delay when loading savestates.
* There is a delay when saving savestates.
* Graphics can glitch out momentarily when loading savestates with GLideN64.
* Loading savestates can cause the emulator to hang the game, happened to me in mario 64's title screen.
* Taking a screenshot can lock up all emulator controls and then crash it if done using Jabo's Direct3D8
  1.7.0.47 with any amount of antialiasing applied other than zero. Jabo's plugins are closed source but
  Project64 Legacy still refuses to mention to the user in any way about the severe issue in the plugin.
* Loading some games like Majora's Mask with Jabo's Direct3D8 1.7.0.47 will make an error message appear
  on-screen, and then the emulator will proceed to crash itself.
* Some games like Majora's Mask have the wrong counter factor applied from the ROM database which causes
  an unecessary amount of lag which can be observed when entering the pause menu.
* Audio emulation is completely destroyed, some games have very bad sounding audio no matter the plugin.
  Try hacks like, "That Time I Became Friends With The Royal Scuttlebug Family And Fell from Space.z64".
* "Pause emulation when window is not active?" is broken and misbehaves. Try out the cheats menu to see.
* Some cheats misbehave and have undesired effects such as screwing up Mario 64's dive exiting manuever.
* Some cheats can have recompiler dependencies and can crash/freeze your game if using interpreter core.
* Many ROMhacks that previously worked on Project64 1.6 will either have issues or will not work at all.
* Unwanted bloat is introduced via the rerouting of jabo plugins to an .ini file which has duplicate CRC
  entries from the RDS in addition to adding it into the aboutini files section. This ini contributes to
  an increased file size and doesn't need to be there, and they could've just kept it inside of the RDS.
* Even more unwanted bloat is introduced via 50+ duplicate database entries in the RDS alone. It's as if
  the developers did not even try here. Plus there's a ton of entries for ROMs that don't ever get used.
* A flurry of several error messages appear when loading the emulator if your PC lacks vcruntime140.dll.
* Switching from Icespirs8's LLE to other OpenGL gfx plugins such as GLideN64 causes an error message to
  appear, and then the emulator will proceed to crash & close. But only if done while a game is running.
* Jabo's Direct3D8 1.7.0.47 has insane graphical glitches in some games with white stretching across the
  screen, making some games unplayable. See USAMUNE practice ROM 1.93 or Ocarina of Time GZ 0.3.4.
* Jabo's Direct3D8 1.7.0.47 can get an infinite number of microcode error messages when booting up ROMs.
* Star manager is no longer compatible out of the gate due to a regression with the executable filename.
* Loading a savestate can ruin all of the graphics if you try to load states just after a ROM is opened.
* Persistently annoying stuttering in Ocarina of Time which hurts the quality of my gameplay experience.

Note that all the issues mentioned above about Project64 Legacy are either issues in Project64 Ver1.6.2,
or said issues have been alleviated to a degree not found in the Project64 Legacy emulator as of V1.6.4.

For the reasons listed above, I consider the legacy project to be a failed experiment that could've been
succesful in "finishing" what they started, as they put it. But unfortunately, it doesn't quite hold up.
Keep in mind that Ver1.6.2 isn't an update to Project64 Legacy in any way, shape or form, and Ver1.6.2's
an entirely different continuation of Project64 1.6, and I'm not responsible for any of Legacy's issues.
Note that this section is only left here as a warning to anyone who is currently using Project64 Legacy,
and to say if you desire an accurate emulator that is also reliable, you should seek alternative options
like Ares or a properly tested and maintained frontend for Mupen64Plus because they will be more stable.
Additionally, the developers responsible for Project64 Legacy have started a new project called "MiB64".
MiB64 is based off of Project64 Legacy's source code so beware of issues, or just use a better emulator.
--------------------------------------------------------------------------------------------------------

Section#04 Plugin Details
--------------------------------------------------------------------------------------------------------
Video (graphics) plugin:

Icepir8's Legacy LLE - This video plugin should be used where Jabo's Direct3D8 won't work for you. It is
		       very accurate but you sometimes need to pair it with its corresponding RSP plugin
		       in order to avoid crashes and instances where games like World Driver don't boot.
		       It was created by Icepir8 for the unfinished "Legacy" experiment, but works here.

Jabo's Direct3D8 1.6.2 - This is the default plugin due to low specs requirements/good pc compatibility.
			 However, it also has many graphics emulation issues, and if your PC can support
			 Icepir8's Legacy LLE video plugin, I'd highly suggest using that plugin instead
			 if you experience bad graphic issues with the ROMs/hacks you're trying to play.
			 Do not enable "Copy framebuffer to RDRAM" or you will suffer evil consequences.
			 Avoid enabling full-scene anti aliasing if possible because it causes problems.
			 If you want try out native widescreen, try enabling this from the Advanced tab:
			 "Adjust game aspect ratio to match yours", then select a widescreen resolution.
			Note: This is a Hex edit of Jabo's 1.6.1 from jabosoft.com/blog/project64-update


Shankle's AntiFbffr ANGLE GLideN64 (1.0) - Use ANGLE GLideN64 for ROMhacks using DEX3 (F3DEX3) microcode
					   or for (most) SM64 hacks. You can enable framebuffer from the
					   ini file if you want to play an F3DEX3 hack with framebuffer,
					   but it will be disabled upon ui config save to prevent crash.
					***Entering fullscreen after changing resolution fixes freezing.


Audio (sound) plugin:

Jabo's DirectSound 1.6.2 - Supports LLE only. Use this plugin to wav log or if AziAudio gives you issues
			   with your current machine (less demanding than AziAudio with lower end PC's).
			   Use Sync game to Audio (per-game) during wav audio logging to stop crackling.
			Note: This is a Hex edit of Jabo's 1.6.1 from jabosoft.com/blog/project64-update

Shankle's LINK's AziAudio [SEP2023] (1.0) - Supports dual HLE / LLE sound. Use Sync game to Audio option
					    to fix stuttering which happens upon pause, savestate loads,
					    fullscreen entering + exiting, and from using frame advance.
					    However, Sync game to Audio will cause Limit FPS F4 to fail.


Input (controller) plugin:

Adaptoid Plugin v1.0 - This plugin can handle up to 4 Adaptoids with support for various types of packs.

Jabo's DirectInput7 1.6.2 - Great as a general-use plugin, it is adequate keyboard and controller users.
			    But be aware that the back shoulder buttons can't hold Z & R simultaneously.
			    Setup mode added in by Gent of Project64 Team from their Project64 1.6 Plus.
			Note: This is a Hex edit of Jabo's 1.6.1 from jabosoft.com/blog/project64-update

LINK's DirectInput7 1.6.2 - A wrapper for Jabo's DirectInput7. Can't save registry configs, but supports
			    keyboard binding via the F/G keys, which makes it possible to do things like
			    aiming. Additionally, it shares registry configurations with Jabo's DInput7.

N-Rage's DirectInput8 Ver1.82a - Good DirectInput plugin with tons of features. You can receive profiles
				 for this plugin from the author which have got fine tuned configuration
				 profiles for all these games: Goldeneye, Duke Nukem, & Duke Nukem Zero.

Shankle's Octomino SDL2 Input 0.1.1 (1.0) - Very suggested choice if this plugin is compatible with your
					    controller. Supports a limited configuration user interface,
					    but shall cause Ver1.6.2 to not close properly if left open.
					    The configuration interface shall not work without a running
					    ROM, the configure controller plugin does nothing otherwise.


Reality Signal Processor plugin:

Icepir8's Legacy RSP - Pairing Ice's RSP with Icepir8's Legacy LLE is necessary with specific games like
		       Stunt Racer, World Driver Championship, also Indiana Jones. Otherwise, don't ever
		       bother using this plugin because it's prone to weak performance (game dependent).

RSP emulation plugin - Though some may consider other RSP plugins as better, the original Project64 V1.6
		       RSP is reliable and has strong performance. Though this plugin is limited to HLE,
		       it outperforms more accurate RSP's like Icepir8's Legacy RSP a lot, while running
		       games like Pokemon Stadium (albeit with some errors) which Mupen64Plus could not.
		       You can configure the RSP to use HLE or LLE sound with "send Audio Lists to audio
		       plugin", giving you HLE audio (not compatible with Jabo!), while the other option
		       is effectively broken, don't click on it or the emulator can freeze/lockup/crash.
--------------------------------------------------------------------------------------------------------

Section#05 RUNNING ROMHACKS
--------------------------------------------------------------------------------------------------------
First of all, Project64 1.6 was not originally designed for playing ROMhacks. They were not even a thing
at the time it was made. So if you want to play ROMhacks, you probably need to setup ROM settings for it
which match the original ROM that was hacked. However, this isn't always the case! You might need to use
8MB Memory Size, a different core style, might need to toggle linking, or you need to disable TLB. Heck,
sometimes you could need a different self-modifying code method if you are using the recompiler. But, if
you don't mess with the ROM settings and don't get it setup properly, it might randomly crash on you. :/
And even if you get all the right ROM settings, you might need to add emulation code inside of PJ64.RDB.
So you better make sure you set it up right. Then, on the plugin side, if you're using Jabo's Direct3D8,
you might need to hex edit your ROM to change its internal name or header to make use of per game hacks.
With Ocarina of Time, it looks for "THE LEGEND OF ZELDA" internal name to apply framebuffer fixes. These
fixes won't work with some ROMhacks of the Master Quest debug version however. For OoT Debug "ZELOOTMA",
you should always try to have a custom internal name to make sure the per game hacks do not get applied.
But for Majora's Mask, you desperately want the per game hacks so that you don't have very bad graphical
glitches with the Lens of Truth. But reusing the internal name from Majora's Mask doesn't work! In cases
like this you can simply copy some code above the internal name of the unmodified ROM into your modified
ROM to get Jabo's plugin to apply the per game hacks. You can do this in a basic hex editor like HxD, it
is what I personally use and works great. However, doing this will cause issues running the ROM in other
emulators and on actual hardware, so I do not suggest doing more than modifying the internal name unless
you specifically want compatibility with Jabo's Direct3D8 for your use cases. Editing the code above the
internal name will actually make the ROM unusable even in the original PJ64 V1.6. So be mindful of this.
Also, ROMhacks might require a specific video plugin to work, otherwise using the wrong video plugin can
result in experiencing very bad and/or jarring graphical problems or you could have an epilepsy seizure.

***Note***
So essentially, in order to get Jabo's Direct3D8 plugins to apply pergame hacks to ROMhacks, you recycle
either the ROM header data above the internal name, or the baseROM's internal name. That's the only way!
--------------------------------------------------------------------------------------------------------

Section#06 Known Issues
--------------------------------------------------------------------------------------------------------
Pokemon Stadium does not work anymore, this is a regression from PJ64 1.6 Plus/1.6.1 and could be fixed.
Limit FPS off doesn't work on Icepir8's Legacy LLE in DirectX8 render mode with fullscreen mode entered.
Depending on the PC hardware, Jabo's Direct3D8 can sometimes freeze, though the ROM still stays running.
The rom browser is a bit buggy but this shouldn't affect your gaming experience so it's not a big issue.
Special characters aren't supported when it comes to language database translations for other languages.
The .exe shall fail to properly close if you leave Octomino SDL2 config window open and close Project64.
There are some controllers which are not supported by any known input plugins and will mandate keyboard.
Some error messages do not get translated into other languages due to them being part of the plugin dll.
Some cheats act up in ROMhacks with shared CRC values (sometimes needed to get Direct3D8 per ROM hacks).
In some ROMhacks, they never get a save data file even made for them and they do not ever save progress.
Having protected memory self modifying code method enabled causes stuttering on certain weaker hardware.
Having advanced block linking and protected memory self modifying code method enabled causes stuttering.
Having advanced block linking enabled causes some ROMs to not boot up at all and get stuck on blackness.
Jabo's plugins don't have shadows on intel cards. However, this can be worked around using 3DAnalyzer w/
24 bit zbuffer (without stensil) to help workaround the issue, but there will still be other gfx issues.
Selecting certain resolutions in Jabo's video plugins can result in graphical problems in certain games.
You can leave the "About" window open for some plugins and you crash if you swap plugins before exiting.
If your CPU usage is high from screen recording or from your PC being infected with trojans and viruses,
the program can misbehave and fail to open up ROMs or have a varying amount of input delay and stutters.
Shankle's GLideN64 can sometimes get stuck on a black screen when messing with config settings. However,
the screen returns to normal if you enter or exit fullscreen mode or if you hot swap one of the plugins.
If you hold down the F1 key, sometimes it accidentally attempts to load the selected state slot instead.
The display will be frozen if you either sleep or lock your computer while using Jabo's Direct3D8 video.
--------------------------------------------------------------------------------------------------------

Section#07 Tips and Tricks
--------------------------------------------------------------------------------------------------------
Try using Counter Factor 1 by default if the only ROMhacks you play are Super Mario 64 or Majora's Mask.
(this can also apply to playing any other games which benefit from counter factor by 1 without crashing)

You can get better default ROM settings (applies to ROMhacks) by disabling hide advanced settings in the
options to access the advanced tab to fine tune the core settings. You can also lower your RAM to 4MB by
default to get smaller savestate sizes and better performance but this only applies for supported games.

If you're using the ROM browser and you have your ROMhacks sorted into it's own folder inside the folder
where you have retail ROMs, you can disable directory recursion from the ROM Selection tab from settings
if you want to only display retail, official N64 games/ROMs you haven't placed inside your Hacks folder.

You can change the default plugins by simply renaming the dll you would like to use by default to.......
DefaultAudio.dll
DefaultInput.dll
DefaultRSP.dll
DefaultVideo.dll

Project64 Ver1.6.2 is portable and if you would like to say, transfer everything to a new PC, you can do
so by compressing the Project64 Ver1.6.2 folder on your PC into a .zip file, pasting it into a USB stick
or uploading it to a cloud storage platform, and then downloading/copying it onto a new PC's hard drive.
However, Project64 1.6 and Jabo plugin configuration settings won't transfer! Same for Shankle AziAudio.
--------------------------------------------------------------------------------------------------------

Section#08 Credits
--------------------------------------------------------------------------------------------------------
While I won't be able to recall every single person whose work has been used to help develop PJ64 1.6.2,
I will still try to name as many people as I can and label their contribution appropriately. As follows,

Bruce Shankle IV - Beta Tester, tons of plugins, databases, application optimizations, documentation.
Glitchy / glitchydorime - Beta Tester, translation support
lilycatx - Beta Tester
grimmer420 - Beta Tester
caseytopaz - Beta Tester
l0lgamez - Beta Tester
theluigidude2007 - Beta Tester
woot - Beta Tester
Alcaro and idc8580 - Flips en masse patch applying (Alcaro made flips, idc made en masse patch applying)

Project64 1.6 Plus Project64 Team:
raw.githubusercontent.com/BruceShankleIV/Project64-1.6.2/7ff51997c16e35a1c0685cc076b085ee6eda1b64/About
.bmp

N-Rage - Input Plugin
clickdevin & wermi - Octomino SDL2 Input Plugin
Gonetz/Sergey Lipskiy, Olivieryuyu, Ryan Rosser, yongzh, Hiroshi Morii, ziggy - GLideN64 Plugin Credits
Azimer - Azimer's Audio Plugin
Clements, Rice, Gonetz, Malcolm, Dave2001, cryhlove, icepir8, zilmar, Azimer, StrmnNrmn, Orkin - glN64
(glN64 served as the foundation for projects like Direct64, bettergln64, GLideN64, and ANGLE GLideN64)
Denis Kopyrin/aglab2 - Azimer's Audio config fix and ANGLE GLideN64, ACE Security Vulnerability Insight,
Graphics glitch fix when loading savestates, coded faster ROM opens in the Legacy RH fork used in 1.6.2.
Jelta and Nekokabu - RDB Codes
Microsoft - Visual Studio Versions 2013 and 2022, Windows OS
All of the contributors of MSYS2, SDL 2.0.12 Library, etc. - Octomino SDL builds toolchain
Maël Hörz - HxD
Don Ho - Notepad++
info@redketchup.io - redketchup.io
listdiff.com
GitHub Copilot - Helped me write some of the new code added in Project64 1.6.2
--------------------------------------------------------------------------------------------------------

Section#09 Don't "Support Project64"
--------------------------------------------------------------------------------------------------------
https://github.com/project64/project64/commit/f825b21de5e7e3cbc5722275754274eadb5497d0
Ctrl-f for Support in the installer.iss one, look at what they were telling their end users...
'Iminent Minibar - Optional Installation', 'Installing this minibar helps supports Project 64'
'Iminent Toolbar - Optional Installation', 'Installing this toolbar helps supports Project 64'
'Lollipop - Optional Installation', 'Installing this helps supports Project 64'
'Delta Toolbar - Optional Installation', 'Installing this toolbar helps supports Project 64'

All of these are different forms of malware. Try downloading Project64_Bundle.exe and scanning somewhere
like @ https://virusscan.jotti.org/ if you wannna see what was active back then (services discontinued).



Iminent microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=PUA:Win32/IminentToolbar

"Devices affected by this threat might exhibit the following unexpected behavior:

    Slow performance
    Presence of added or modified files
    Changes in desktop settings
    Freezing or crashing
    Diminished storage space"


Lollipop microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Adware:Win32/Lollipop

"This adware program shows ads as you browse the web. It can also redirect your search engine results,
monitor what you do on your PC, download applications, and send information about your PC to a hacker.

It can be downloaded from the program's website or bundled with some third-party software installation
programs."


Delta Toolbar pcrisk.com/removal-guides/7040-remove-delta-search-redirect-toolbar#!prettyPhoto

"Delta toolbar causes browser redirects to delta-search.com and, commonly, this toolbar is installed
without users' consent by third party freeware or free browser extensions. This browser hijacker is
similar to searchgol and buenosearch amongst many others.

Note that a common tactic, widely used by free software developers, is to 'bundle' unwanted toolbars with
their programs to monetize their products. Thus, to prevent installation of such adware on your Internet
browsers, closely inspect each freeware installation step, disallowing any suggested changes to your
Internet browsers and avoid installation of additional software.

If your download is managed by a download client, decline installation of promoted browser add-ons. When
installing free software, ensure that you choose the 'Advanced' or 'Custom' installation options - this
will reveal any hidden (bundled) software that you may choose to deselect."



But that is not even all of it, nope! He went on to bundle even more different viruses, until people had
enough of his crap. Ever since, he's nagged everyone to "Support Project64" by "donating". Conversation:
https://www.emutalk.net/threads/removing-the-spyware-from-project64-2-1.54652/
https://github.com/project64/project64/pull/354
--------------------------------------------------------------------------------------------------------

Section#10 Special Thanks & Shoutouts
--------------------------------------------------------------------------------------------------------
These are my special thanks and shoutouts to awesome people for their work, assistance, and/or kindness:

Bruce Shankle III - For helping me learn to use Visual Studio when I first started this project, and for
                    helping  me obtain an Uninterruptible Power Supply which has helped me tremendously.
                    Later on, he helped hook me up with high speed internet to help with my thousands of
                    GitHub commits that I was pushing to my private repositories. You're a great father.

z64me - For being supportive and addressing issues during the project's primitive stages when I started.

l0lgamez - Although the alternative OoT config you tested for has got scrapped, you were a great tester!

aglab2 - I'm so glad that you researched and documented about the vulnerability inside of N64 emulators.
	 Without you, this project wouldn't have ever existed and I cannot thank people like you enough.
	 Not only that, but your Legacy fork was referenced for Project64 V1.6.2 to get improvements in.
	 Thank you for contributing valuable code which shall be used to improve everyone's experiences.

gaudy-twinned0z@icloud.com / clickdevin - Thanks so much for developing the Octomino SDL plugin, and for
					  giving me the tip I needed for building. You really rock dude!

TrulyNan - "1.6 Shankle's Final Cut Gigachad Version will save us all." I love that enthusiasm of yours!

glitchydorime - I really appreciate your warm comments about this project. 10/10?!? I love hearing that!
		And you're a very good translator. Thanks for being there every step of the way with me.

Emmanuel - For giving me a piece of candy he found at the bottom of a vending machine. What a great guy!

lilycatx - You're the sweetest person ever Lily, thanks for being the best friend a friend could have!💖
--------------------------------------------------------------------------------------------------------

Section#11 The End
--------------------------------------------------------------------------------------------------------
I hope you enjoy using this. If you don't, then I encourage you to improve the source code and fix bugs.
Peace! ✌

- Edwin Bruce Shankle IV
--------------------------------------------------------------------------------------------------------

Section#12 Extra (Part 1), Suggestions
--------------------------------------------------------------------------------------------------------
Additionally, if you decide to develop a new revision of Ver1.6.2 or make a Ver1.6.3, I'd suggest fixing
the following issues with this emulator:
--------------------------------------------------------------------------------------------------------
* Missing Pokemon Stadium support (this regression was introduced in 1.6.1). May get fixed by comparing
  with secondary sources like deathdroid's Project64 1.6 or Project64 Legacy to determine what's needed.
* Missing netplay support.
* Missing kaillera support.
* Missing debugger support.
* Missing summercart support.
* Missing disk drive support.
* Missing N64 mouse ROMs support.
* Missing language translations support besides spanish (but only for languages w/ english characters).
* Save data never gets created when playing newer versions of Ocarina of Time GZ.
* Save data being stored as ROM's internal name->Change to store by CRC instead to eliminate issues.
* Some controllers don't work with any known input plugins (someone please make a perfect input plugin).
* Both the ROM and cheat database could be very greatly improved and expanded upon. However, there is no
  need to add support for ROMs or games that won't get usage w/ Ver1.6.2. Because if you do, then you're
  just adding unneeded bloat to the file size which is something you never want to do as Ver1.6.2 should
  be as portable as it possibly can be, ideally not much more than 11MB once compressed inside of a RAR.
* Ocarina of Time and Ocarina of Time ROMhacks can crash when pausing the ROM by using Counter Factor 1.
* Ocarina of Time subscreen delay is currently handled via the RDB file, and thus there is going to be a
  delay still with ROMhacks that don't incorporate a subscreen delay fix of their own. Maybe someone can
  integrate the subscreen delay fix coding into the emulator so the subscreen delay fix's can be removed
  from the RDB and eliminate the issue altogether. For now though, Legacy LLE video is an ok workaround.


Also, if you develop the ROM database, please do not ever include any of the following lines in your RDB
entries, because if you do, then you are just wasting space, assuming you leave internal defaults alone:

(In paranthesis, I am telling you what the setting is set to when it is left empty like this as a guide)


CPU= 
(User's selected core setting, Recompiler by default)
MEM= 
(User's selected core setting, 8 by default)
SCM= 
(User's selected core setting, Check Memory Advance by default)
CF= 
(User's selected core setting, 2 by default)
Save= 
(Autodetected)
Caching= 
(On)
Buffer= 
(Off)
ABL= 
(Off)
RDP= 
(Off)
TLB= 
(On)
SP= 
(Off)
SI= 
(Off)
--------------------------------------------------------------------------------------------------------

Section#13 Extra (Part 2), How to Develop Project64 1.6 + BEWARE of MiB/PJ64Team!
--------------------------------------------------------------------------------------------------------
If you would like to develop Project64 1.6 or you're unaware of the risks involved with associating with
Men in Black/Project64 Team, please carefully read this informative document from my URL provided below:
https://docs.google.com/document/d/1VosUr3DHkhFd6hYRLrwpAtuzDuvYq0zUe2C1rkQ1_xg/edit?usp=sharing
--------------------------------------------------------------------------------------------------------

Section#14 Extra (Part 3), Technical Documentation
--------------------------------------------------------------------------------------------------------
Surreal64 Documentation for Project64 1.4 from here http://surreal64ce.wikidot.com/settings:pj64settings

With this documentation and clever text editing, you can fix many general emulation issues you encounter
by adjusting your ROM Settings as appropriate. This documentation is from the Surreal64 website for V1.4
but it applies here as well. Simply open up the PJ64.rdb file in your favorite text editor and you'll be
able to individually tweak how the program emulates ROMs, particularly using the SCM/Self-modifying Code
Method and the CPU/CPU Core Style. You can fix many issues you encounter between just those two options.



Counter Factor
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Counter Factor affects the timing in the core, it's a difficult option to explain, what you need to know
is that 2 is the default and best speed you can get in most games without losing frames of video, 1 is
required by some games to prevent flicker or optionally to increase smoothness, and 3 is a possibility
for some games to improve performance (overall) on slower systems. Values higher than 3 are likely to
cause severe frame loss, leading to instability. But in the hands of experienced users this setting can
be used as a crude form of frame-skip.


CPU Core Style
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
The Recompiler and Interpreter are two seperate cores in the emulator (although the Recompiler
implementation is based on the Interpreter). Generally, any game that works on the Recompiler will also
work on the Interpreter, but not always vice-versa. Explaining the difference between a Recompiler and
an Interpreter in a general sense is beyond the scope of this document, suffficient to say that the
Recompiler is (usually much) faster but (a little) less compatible, the Interpreter (usually much)
slower but (a little) more compatible.

Note from Bruce IV: Recompiler must be used for a few older Ocarina of Time and Super Mario 64 romhacks.


Advanced Block Linking
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Advanced Block Linking is one of Project64's speed optimization techniques - it usually provides a
performance increase without negative side effects. However (this is why this can be set on a per game
basis) some games run badly with this On, and some games don't work at all if On. Similarly, some
games have been found to not work if this is Off.

Note from Bruce IV: Linking as well as TLB must be disabled for some older Ocarina of Time romhacks.


Memory Size
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
If 4, the system will have an emulated RDRAM size of 4MB, which is the standard amount of memory an
N64 console has. This reduces size of state saves, improves performance in some ways.

If 8, the system will have an emulated RDRAM size of 8MB, which represents an N64 console with the 4MB
memory expansion accessory installed. This results in larger state saves and lower performance, but is
required by some games.

Note from Bruce IV: 8 is the best default because most romhacks (which get default settings) need 8MB.


Register Caching
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Probably the recompiler's most significant optimization technique, register caching usually dramatically
improves the efficiency of the recompiler without side effects. The reason this is included as an option
is that sometimes register caching will produce an error in a game. Register caching can cause many
kinds of obscure errors, such as events in a game not triggering, or a game becoming stuck in a loop,
as well as obvious errors such as a crash. If you find you are having stability problems with the
recompiler and not the interpreter, try disabling register caching to see if you can get past the
point/game with at least some of the performance of the recompiler.


Save Type
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
You can set any of the four possible native cartridge save types here, but the only one that should be
needed is 16kbit eepROM, because it is not possible for the emulator to detect the difference between a
game asking for 16kbit and a game asking for 4kbit - Project64 assumes 4kbit, the more common size. If
a game actually needs 16kbit it will either fail to save or not boot unless set to 16kbit eepROM. The
other settings are included for the rare possibility that the autodetect goes wrong - generally, don't
set them. Note that MemPak is treated seperately and will work in addition to whatever is selected here.

Note from Bruce IV: Failing to have 16kbit eepROM save type set can result in your controls not working.


Self-modifying Code Method
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Many games use "self modifying code". In a nutshell, this makes them harder to emulate. Project64 has
several methods of dealing with this situation, which range from fast on one side to more secure/stable
on the other. In order from fastest to most secure these are:

None, Cache, Check Memory & Cache, Check Memory Advance, Change Memory & Cache, Check Memory & Return,
Protect Memory.

Note from Bruce IV: I've resorted the list of fastest to most secure SCM methods based on my experience.
Keep in mind that even though one method may be listed to be more secure than another, it is HIGHLY game
dependent as to what method will work better for it! Example, Check Memory & Return is great for Ocarina
of Time, but freezes on Animal Crossing before getting past the intro cutscene. Use ROM Settings wisely!
Additionally, Check Memory & Return is a reimplementation of Check Memory Advance which returns on clear
recompiler cache, hence the name. I invented this method so that we can safetly play Ocarina of Time w/o
crashing from standing on the tree stump top in front of the skull skid and then leaving the lost woods.


Larger Compile Buffer
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Yet another highly technical setting. Some games generate particularly complex code structures which
tend to overlow the default 20MB compiler buffer and stall the system. By enabling this a game will be
given a 50MB buffer, which obviously increases resource usage but may help reduce occurence of overflows
and thus improve performance. Most games do not need more than 20MB hence this will usually only waste
resources.


TLB
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
This is another highly technical core feature, it's part of the N64 CPU, used extensively by some games
(Goldeneye, Mario) and not at all by others (Zelda). If a game uses the TLB (end user can't tell this
without knowing or by trial and error) then TLB must be enabled or the game will fail with various error
messages, usually soon after boot. TLB is an option mainly because you can gain some performance by
turning it off when not needed, and strangely, some games require it disabled to work.

Note from Bruce IV: TLB must be disabled for some older Ocarina of Time romhacks.
--------------------------------------------------------------------------------------------------------

Section#15 Extra (Part 4), The ROM Browser Setup
--------------------------------------------------------------------------------------------------------
The ROM browser system, controlled by PJ64.RDB is supposed to work like this:

You select your ROM directory and then all those ROMs will be loaded in the ROM browser. They get marked
by colors based on compatibility. Green should indicate that the game is functional, no delay or freeze.
Yellow should indicate that a special video (and possibly RSP plugin) is necessary for the user to enjoy
playing the game without bad issues. Red should indicate the game can't be played. The colors mean this:

Green - Compatible

Yellow - Semicompatible

Red - Incompatible

That's the theory anyways. Most games are Compatible or Semicompatible, only rarely is one Incompatible.
The user should refer to the plugin note if given for Semicompatible games to see what plugin(s) to use.
However, the RDB is currently in beta and is always in need of work so this is just the RDB theory/idea.
--------------------------------------------------------------------------------------------------------