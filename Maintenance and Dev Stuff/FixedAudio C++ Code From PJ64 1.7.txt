Keep in mind we would need to include Audio.cpp and Audio.h stuff from the Mips folder and perhaps other stuff as well,
have not really looked into this much. I'll try to focus on getting it working in WIP 10 for Shankle's LINK's AziAudio.

Below is for Memory.c

	case 0x04500000: /* AI registers */
		switch (PAddr) {
		case 0x04500004: 
			if (g_FixedAudio)
			{
				g_N64System->GetRecompiler()->UpdateCounters(&Section->BlockCycleCount(),&Section->BlockRandomModifier(),FALSE);			
				Pushad();
				MoveConstToX86reg((DWORD)g_Audio,x86_ECX);				
				Call_Direct(CAudio::AiGetLength,"AiGetLength");
				MoveX86regToVariable(x86_EAX,&TempValue,"TempValue"); 
				Popad();
				MoveVariableToX86reg(&TempValue,"TempValue",Reg);
			} else {
				if (AiReadLength != NULL) {
					Pushad();
					Call_Direct(AiReadLength,"AiReadLength");
					MoveX86regToVariable(x86_EAX,&TempValue,"TempValue"); 
					Popad();
					MoveVariableToX86reg(&TempValue,"TempValue",Reg);
				} else {
					MoveConstToX86reg(0,Reg);
				}						
			}
			break;

		case 0x0450000C: 
			if (g_FixedAudio)
			{
				Pushad();
				MoveConstToX86reg((DWORD)g_Audio,x86_ECX);
				Call_Direct(CAudio::AiGetStatus,"AiGetStatus");
				MoveX86regToVariable(x86_EAX,&TempValue,"TempValue"); 
				Popad();
				MoveVariableToX86reg(&TempValue,"TempValue",Reg);
			} else {
				MoveVariableToX86reg(&AI_STATUS_REG,"AI_STATUS_REG",Reg); 
			}
			break;

	case 0x04500000: /* AI registers */
		switch (PAddr) {
		case 0x04500000: MoveConstToVariable(Value,&AI_DRAM_ADDR_REG,"AI_DRAM_ADDR_REG"); break;
		case 0x04500004: 
			MoveConstToVariable(Value,&AI_LEN_REG,"AI_LEN_REG");
			Pushad();
			if (g_FixedAudio)
			{
				X86BreakPoint(__FILE__,__LINE__);
				MoveConstToX86reg((DWORD)Value,x86_EDX);				
				MoveConstToX86reg((DWORD)g_Audio,x86_ECX);				
				Call_Direct(CAudio::AiSetLength,"AiSetLength");
			}
			Call_Direct(AiLenChanged,"AiLenChanged");
			Popad();
			break;

		case 0x0450000C:
			/* Clear Interrupt */; 
			AndConstToVariable(~MI_INTR_AI,&MI_INTR_REG,"MI_INTR_REG");
			if (!g_FixedAudio)
			{
				AndConstToVariable(~MI_INTR_AI,&AudioIntrReg,"AudioIntrReg");
			}
			Pushad();
			Call_Direct(CheckInterrupts,"CheckInterrupts");
			Popad();
			break;

	case 0x04500000: /* AI registers */
		switch (PAddr) {
		case 0x04500000: MoveX86regToVariable(x86Reg,&AI_DRAM_ADDR_REG,"AI_DRAM_ADDR_REG"); break;
		case 0x04500004: 
			MoveX86regToVariable(x86Reg,&AI_LEN_REG,"AI_LEN_REG");
			Pushad();
			if (g_FixedAudio)
			{
				g_N64System->GetRecompiler()->UpdateCounters(&Section->BlockCycleCount(),&Section->BlockRandomModifier(),FALSE);			
				MoveX86RegToX86Reg(x86Reg,x86_EDX);				
				MoveConstToX86reg((DWORD)g_Audio,x86_ECX);				
				Call_Direct(CAudio::AiSetLength,"AiSetLength");
			}
			Call_Direct(AiLenChanged,"AiLenChanged");
			Popad();
			break;

	case 0x04500000:
		switch (PAddr) {
		case 0x04500004: 
			if (g_FixedAudio)
			{
				*Value = CAudio::AiGetLength(g_Audio);
			} else {
				if (AiReadLength != NULL) {
					*Value = AiReadLength(); 
				} else {
					*Value = 0;
				}
			}
			break;

		case 0x0450000C: 
			if (g_FixedAudio)
			{
				*Value = CAudio::AiGetStatus(g_Audio);
			} else {
				*Value = AI_STATUS_REG; 
			}
			break;

	case 0x04500000: 
		switch (PAddr) {
		case 0x04500000: AI_DRAM_ADDR_REG = Value; break;
		case 0x04500004: 
			AI_LEN_REG = Value; 
			if (g_FixedAudio)
			{
				CAudio::AiSetLength(g_Audio,Value);
			}
			if (AiLenChanged != NULL) { AiLenChanged(); }				
			break;

		case 0x04500010: 
			AI_DACRATE_REG = Value;  
			DacrateChanged(g_SystemType);
			if (g_FixedAudio)
			{
				g_Audio->AiSetFrequency(Value,g_SystemType);
			}
			break;

Below is code for exception.c

void __cdecl CheckInterrupts ( void ) {	

	if (!g_FixedAudio && CPU_Type != CPU_SyncCores) {
		MI_INTR_REG &= ~MI_INTR_AI;
		MI_INTR_REG |= (AudioIntrReg & MI_INTR_AI);
	}

Below is code for N64 Class

void CN64System::RefreshScreen ( void ) {
	DWORD CPU_UsageAddr = Timer_None, ProfilingAddr = Timer_None;
	DWORD OLD_VI_V_SYNC_REG = 0, VI_INTR_TIME = 500000;
	
	if (bShowCPUPer()) { CPU_UsageAddr = m_CPU_Usage.StartTimer(Timer_RefreshScreen); }
	//if (bProfiling)    { ProfilingAddr = m_Profile.StartTimer(Timer_RefreshScreen); }

	//Calculate how many cycles to next refresh
	if (_Reg->VI_V_SYNC_REG == 0) {
		VI_INTR_TIME = 500000;
	} else {
		VI_INTR_TIME = (_Reg->VI_V_SYNC_REG + 1) * ViRefreshRate();
		if ((_Reg->VI_V_SYNC_REG % 1) != 0) {
			VI_INTR_TIME -= 38;
		}
	}
	_Reg->ChangeTimerRelative(ViTimer,VI_INTR_TIME); 
	if (g_FixedAudio)
	{
		_Audio->UpdateAudioTimer (VI_INTR_TIME);	
	}
